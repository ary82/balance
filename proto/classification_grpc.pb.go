// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: classification.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ClassifyService_Classify_FullMethodName = "/proto.ClassifyService/Classify"
)

// ClassifyServiceClient is the client API for ClassifyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassifyServiceClient interface {
	Classify(ctx context.Context, in *ClassifyRequest, opts ...grpc.CallOption) (*ClassifyResponse, error)
}

type classifyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassifyServiceClient(cc grpc.ClientConnInterface) ClassifyServiceClient {
	return &classifyServiceClient{cc}
}

func (c *classifyServiceClient) Classify(ctx context.Context, in *ClassifyRequest, opts ...grpc.CallOption) (*ClassifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClassifyResponse)
	err := c.cc.Invoke(ctx, ClassifyService_Classify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassifyServiceServer is the server API for ClassifyService service.
// All implementations must embed UnimplementedClassifyServiceServer
// for forward compatibility
type ClassifyServiceServer interface {
	Classify(context.Context, *ClassifyRequest) (*ClassifyResponse, error)
	mustEmbedUnimplementedClassifyServiceServer()
}

// UnimplementedClassifyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClassifyServiceServer struct {
}

func (UnimplementedClassifyServiceServer) Classify(context.Context, *ClassifyRequest) (*ClassifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Classify not implemented")
}
func (UnimplementedClassifyServiceServer) mustEmbedUnimplementedClassifyServiceServer() {}

// UnsafeClassifyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassifyServiceServer will
// result in compilation errors.
type UnsafeClassifyServiceServer interface {
	mustEmbedUnimplementedClassifyServiceServer()
}

func RegisterClassifyServiceServer(s grpc.ServiceRegistrar, srv ClassifyServiceServer) {
	s.RegisterService(&ClassifyService_ServiceDesc, srv)
}

func _ClassifyService_Classify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassifyServiceServer).Classify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassifyService_Classify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassifyServiceServer).Classify(ctx, req.(*ClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClassifyService_ServiceDesc is the grpc.ServiceDesc for ClassifyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClassifyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ClassifyService",
	HandlerType: (*ClassifyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Classify",
			Handler:    _ClassifyService_Classify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "classification.proto",
}
